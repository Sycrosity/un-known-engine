
#Based on the "trust" template v0.1.2
#https://github.com/japaric/trust/tree/v0.1.2

environment:
  global:
    RUST_VERSION: stable

    #TODO Update this to match the name of your project.
    CRATE_NAME: un-known-engine

  #TODO These are all the build jobs. Adjust as necessary. Comment out what you
  #don't need
  matrix:
    #MinGW
    # - TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu

    #MSVC
    # - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc

    #Linux
    - TARGET: x86_64-unknown-linux-gnu
    - TARGET: x86_64-unknown-linux-musl

    #MacOS
    - TARGET: x86_64-apple-darwin

    #Testing other channels
    # - TARGET: x86_64-pc-windows-gnu
    #   RUST_VERSION: nightly
    # - TARGET: x86_64-pc-windows-msvc
    #   RUST_VERSION: nightly



install:
  - ps: >-
      If ($env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($env:TARGET -eq 'i686-pc-windows-gnu') {
        $env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

test_script:
  #we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo clippy --target %TARGET% &&
      cargo build --target %TARGET% &&
      cargo test --target %TARGET%
    )
      # cargo clippy --target %TARGET% --release &&
      # cargo build --target %TARGET% --release &&
      # cargo test --target %TARGET% --release &&
      # cargo run --target %TARGET% &&
      # cargo run --target %TARGET% --release

before_deploy:
  #TODO Update this to build the artifacts that matter to you
  - cargo rustc --target %TARGET% --bin %CRATE_NAME% # -- -C lto
  - ps: ci\before_deploy.ps1

deploy:
  artifact: /.*\.zip/

  auth_token:
    secure: dAC0K0vuPF10GTbrLR9LXK9GStNBWvo02sl25pF8NDuByPoyvY0ECRYMcMimQElY
  description: ''
  on:
    #TODO Here you can pick which targets will generate binary releases
    #In this example, there are some targets that are tested using the stable
    #and nightly channels. This condition makes sure there is only one release
    #for such targets and that's generated using the stable channel
    RUST_VERSION: stable
    # branch: master
    appveyor_repo_tag: true
  provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    #Release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  - provider: Email
    on_build_success: true

#Building is done in the test phase, so we disable Appveyor's build phase.
build: false
